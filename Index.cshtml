<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1" />
    <title>Nova Job Automator</title>

    <!-- [Start] jQuery v1.10.2 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license -->
    <script src="Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>

    <!-- [End] -->
    <!-- [Start] JSONFormatter -->
    <script>

        var JSONFormatter = (function () {
            var init = function (json, options) {

                // default settings
                var settings = $.extend({
                    'appendTo': 'body',
                    'list_id': 'json',
                    'collapse': false
                }, options);

                var loopCount = 0;

                loopObjectOfObjects = function (json2, ulId) {
                    $.each(json2, function (k3, v3) {
                        // object of objects
                        if (typeof v3 == 'object') {
                            $('#' + settings.list_id + ' #' + ulId).append('<li><span>{</span> <ul id="' + ulId + '-' + k3 + '"></ul></li>');
                            $.each(v3, function (k4, v4) {
                                if (typeof v4 == 'object' && v4 != null) {
                                    $('#' + settings.list_id + ' #' + ulId + '-' + k3).append('<li>' + k4 + ' <span>{</span> <ul id="' + k4 + '-' + loopCount + '"></ul></li>');
                                    loopAgain(v4, k4, k4 + '-' + loopCount);
                                }
                                else {
                                    $('#' + settings.list_id + ' #' + ulId + '-' + k3).append('<li>' + k4 + ': ' + v4 + '</li>');
                                }

                            });
                        }
                        else {
                            // normal array
                            $('#' + settings.list_id + ' #' + ulId).append('<li>' + v3 + '</li>')
                        }
                    });
                },

                    loopAgain = function (v, k, ulId) {
                        loopCount++;
                        $.each(v, function (nextKey, nextVal) {
                            var nextListId = nextKey + '-' + loopCount;
                            var newList = '<ul id="' + nextListId + '"></ul>';
                            if (nextVal != null && typeof nextVal == 'object') {
                                if (nextVal.length == 0) {
                                    // an empty object, just output that
                                    $('#' + settings.list_id + ' #' + ulId).append('<li><i>' + nextKey + ':</i> []</li>');
                                }
                                else if (nextVal.length >= 1) {
                                    // an object of objects
                                    $('#' + settings.list_id + ' #' + ulId).append('<li><b>' + nextKey + ':</b> <span>[</span> ' + newList + '</li>');
                                    loopObjectOfObjects(nextVal, nextListId);
                                }
                                else if (nextVal.length == undefined) {
                                    // next node
                                    $('#' + settings.list_id + ' #' + ulId).append('<li><b>' + nextKey + ':</b> <span>{</span> ' + newList + '</li>');
                                    loopAgain(nextVal, nextKey, nextListId);
                                }
                            }
                            else {
                                // value|key
                                // if(nextKey.val == undefined) {
                                //   $('#' + settings.list_id + ' #' + ulId).append('<li>' + nextVal + '</li>');
                                //
                                // }
                                // else {
                                $('#' + settings.list_id + ' #' + ulId).append('<li><i>' + nextKey + ':</i> ' + nextVal + '</li>');

                                // }
                            }
                        });
                    },

                    addClosingBraces = function () {
                        $('#' + settings.list_id + ' span').each(function () {
                            var closingBrace = '<span>}</span>';
                            if ($(this).text() == "[") {
                                closingBrace = '<span>]</span>';
                            }
                            $(this).parent().find('ul').eq(0).after(closingBrace);
                        });
                    };

                var jsonList = $('<ul id="' + settings.list_id + '" />');

                $(settings.appendTo).append(jsonList);

                $.each(json, function (key, val) {



                    if (val != null && typeof val == 'object') {
                        var goObj = false;
                        var goArray = false;
                        var nk = '';
                        $.each(val, function (nextKey, nextVal) {

                            if (nextVal != null && typeof nextVal == 'object') {
                                if (nextVal.length == undefined) {
                                    goObj = true;
                                    nk = nextKey;
                                }
                                else {
                                    goObj = false;
                                }
                            }
                            else {
                                // console.log('nextVal ' + nextVal);
                                goArray = true;
                            }
                        });

                        if (goObj) {
                            $('#' + settings.list_id).append('<li><b>' + key + ':</b> <span>[</span><ul id="' + nk + '-' + loopCount + '"></ul></li>');
                            loopObjectOfObjects(val, nk + '-' + loopCount);
                        }
                        else if (goArray) {
                            $('#' + settings.list_id).append('<li><b>' + key + ':</b> <span>[</span><ul id="' + nk + '-' + loopCount + '"></ul></li>');
                            loopAgain(val, nk, nk + '-' + loopCount);
                        }
                        else {
                            $('#' + settings.list_id).append('<li><b>' + key + ':</b> <span>{</span><ul id="' + key + '-' + loopCount + '"></ul></li>');
                            loopAgain(val, key, key + '-' + loopCount);
                        }

                    }
                    else {
                        $('#' + settings.list_id).append('<li><i>' + key + ':</i> ' + val + '</li>');
                    }
                });

                addClosingBraces();

                if (settings.collapse) {
                    addToggles(settings.list_id);
                }

            },

                addToggles = function (listId) {
                    $('#' + listId + " > li").find('ul').each(function () {
                        $(this).parent().find('span').eq(0).after('<span class="toggle fake-link"> - </span>');
                    });

                    $('#' + listId + ' .toggle').next().slideUp().end().text(' + ').on('click', function () {
                        if ($(this).next().is(":visible")) {
                            $(this).next().slideUp().end().text(' + ');
                        }
                        else {
                            $(this).next().slideDown().end().text(' - ');
                        }
                    });
                };

            return {

                format: function (json, options) {
                    init(json, options);
                }

            }

        })();
    </script>
    <!-- [End] -->
    <!-- [Start] LoadJson Utility -->
    <script>
        var loadjson = function (url, sig) {
            if (window.loadingJson) { alert('Please wait for previous operation to complete!'); return }
            window.safesignal(sig);
            window.loadingJson = true;
            var holder = $('#sb233'), loading = $('#loading');
            holder.empty();
            holder.hide();
            loading.show();
            $.get(url).done(function (data) {
                JSONFormatter.format(data, {

                    collapse: true, // Setting to 'true' this will format the JSON into a collapsable/expandable tree
                    appendTo: '#sb233', // A string of the id, class or element name to append the formatted json
                    list_id: 'json' // The name of the id at the root ul of the formatted JSON
                })
            }).fail(function () { holder.text('Error occurred!') }).always(function () {
                window.safesignal(sig); window.loadingJson = false;
                holder.show();
                loading.hide()
            });


        }


    </script>
    <!-- [End] -->
    <!-- [Start] CountDownLoop Utility -->
    <script>

        function signal() {
            this.lock = false;
            this.signal = function (signal) {
                this.lock = typeof signal == 'boolean' ? signal : !this.lock
            }
        }

        window.safesignal = function (sig) {
            if (sig && sig.__proto__ == signal.prototype) sig.signal();
            return sig ? !!sig.lock : false
        }

        window.clearSbintv = function () {
            clearInterval(window.sbIntv);
            $('#countdown').empty();
        }

        var startloop = function (cb, time) {
            var r = $('#countdown'), tmp = time, sig = new signal();

            cb(sig);
            return setInterval(function () {


                if (sig.lock)
                    r.empty();
                else {
                    if (--tmp == 0) {
                        r.empty();
                        cb(sig)
                    }

                    else if (tmp > 0) {
                        var m = (tmp / 60) >> 0, s = (tmp - m * 60) + '';

                        r.text('Refreshing in ' + (m > 0 ? ((m < 10 ? '0' : '') + m + ':') : '') + ((s < 10 ? '0' : '')) + s)

                    }


                    tmp > 0 || (tmp = time)

                }

            }, 1000);

        }
    </script>
    <!-- [End] -->

    <link rel="stylesheet" href="content/Site.css" />
</head>
<body>

    <div id="header">

        <div style="color:#0471af;font-size:15px;margin:33px 0 0 270px;">
            Nova Job Automator
        </div>
        <div id="countdown" style="position:fixed;right:5px;margin:5px;background:#fff">

        </div>
        <div style="float:right;padding:5px; margin:-50px 0 0 0;">
            <a class="button" onclick=" window.clearSbintv();window.sbIntv=startloop(function () { loadjson('api/status', new signal) }, 60)" title="Return to Overall Status View">Status</a>

            <a class="button" onclick="window.clearSbintv();loadjson('api/control/start')" title="Start the Service">Start</a>
            <a class="button" onclick="window.clearSbintv();loadjson('api/control/stop')" title="Stop the Service">Stop</a>
            

        </div>
    </div>
    <div style='padding:60px 10px'>
        <div id="loading">

            <div class="loading3">
                <div class="line1"></div>
                <div class="line2"></div>
                <div class="line3"></div>
                <div class="line4"></div>
            </div>

        </div>
        <div id='sb233'>


        </div>
    </div>
    <script>

        window.sbIntv=startloop(function () { loadjson('api/status', new signal) }, 60)
    </script>
</body>
</html>
